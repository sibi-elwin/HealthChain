/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace MedicalRecordContract {
  export type RecordStruct = {
    id: BigNumberish;
    cid: string;
    uploader: string;
    patient: string;
    timestamp: BigNumberish;
    fileType: string;
    description: string;
  };

  export type RecordStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    string,
    string
  ] & {
    id: BigNumber;
    cid: string;
    uploader: string;
    patient: string;
    timestamp: BigNumber;
    fileType: string;
    description: string;
  };
}

export interface MedicalRecordsInterface extends utils.Interface {
  functions: {
    "accessControlContract()": FunctionFragment;
    "addRecord(address,string,string,string)": FunctionFragment;
    "getPatientRecordIds(address)": FunctionFragment;
    "getRecord(uint256)": FunctionFragment;
    "grantAccess(address)": FunctionFragment;
    "patientDoctorAccess(address,address)": FunctionFragment;
    "records(uint256)": FunctionFragment;
    "revokeAccess(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accessControlContract"
      | "addRecord"
      | "getPatientRecordIds"
      | "getRecord"
      | "grantAccess"
      | "patientDoctorAccess"
      | "records"
      | "revokeAccess"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accessControlContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRecord",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPatientRecordIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "grantAccess", values: [string]): string;
  encodeFunctionData(
    functionFragment: "patientDoctorAccess",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "records",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accessControlContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPatientRecordIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "patientDoctorAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "records", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;

  events: {
    "AccessGranted(address,address)": EventFragment;
    "AccessRevoked(address,address)": EventFragment;
    "RecordAdded(uint256,address,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccessGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AccessRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecordAdded"): EventFragment;
}

export interface AccessGrantedEventObject {
  patient: string;
  doctor: string;
}
export type AccessGrantedEvent = TypedEvent<
  [string, string],
  AccessGrantedEventObject
>;

export type AccessGrantedEventFilter = TypedEventFilter<AccessGrantedEvent>;

export interface AccessRevokedEventObject {
  patient: string;
  doctor: string;
}
export type AccessRevokedEvent = TypedEvent<
  [string, string],
  AccessRevokedEventObject
>;

export type AccessRevokedEventFilter = TypedEventFilter<AccessRevokedEvent>;

export interface RecordAddedEventObject {
  recordId: BigNumber;
  patient: string;
  uploader: string;
  cid: string;
}
export type RecordAddedEvent = TypedEvent<
  [BigNumber, string, string, string],
  RecordAddedEventObject
>;

export type RecordAddedEventFilter = TypedEventFilter<RecordAddedEvent>;

export interface MedicalRecords extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MedicalRecordsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accessControlContract(overrides?: CallOverrides): Promise<[string]>;

    addRecord(
      patient: string,
      cid: string,
      fileType: string,
      description: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getPatientRecordIds(
      patient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getRecord(
      recordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[MedicalRecordContract.RecordStructOutput]>;

    grantAccess(
      doctor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    patientDoctorAccess(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    records(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, BigNumber, string, string] & {
        id: BigNumber;
        cid: string;
        uploader: string;
        patient: string;
        timestamp: BigNumber;
        fileType: string;
        description: string;
      }
    >;

    revokeAccess(
      doctor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  accessControlContract(overrides?: CallOverrides): Promise<string>;

  addRecord(
    patient: string,
    cid: string,
    fileType: string,
    description: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getPatientRecordIds(
    patient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRecord(
    recordId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<MedicalRecordContract.RecordStructOutput>;

  grantAccess(
    doctor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  patientDoctorAccess(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  records(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, BigNumber, string, string] & {
      id: BigNumber;
      cid: string;
      uploader: string;
      patient: string;
      timestamp: BigNumber;
      fileType: string;
      description: string;
    }
  >;

  revokeAccess(
    doctor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    accessControlContract(overrides?: CallOverrides): Promise<string>;

    addRecord(
      patient: string,
      cid: string,
      fileType: string,
      description: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getPatientRecordIds(
      patient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRecord(
      recordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<MedicalRecordContract.RecordStructOutput>;

    grantAccess(doctor: string, overrides?: CallOverrides): Promise<void>;

    patientDoctorAccess(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    records(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, BigNumber, string, string] & {
        id: BigNumber;
        cid: string;
        uploader: string;
        patient: string;
        timestamp: BigNumber;
        fileType: string;
        description: string;
      }
    >;

    revokeAccess(doctor: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AccessGranted(address,address)"(
      patient?: string | null,
      doctor?: string | null
    ): AccessGrantedEventFilter;
    AccessGranted(
      patient?: string | null,
      doctor?: string | null
    ): AccessGrantedEventFilter;

    "AccessRevoked(address,address)"(
      patient?: string | null,
      doctor?: string | null
    ): AccessRevokedEventFilter;
    AccessRevoked(
      patient?: string | null,
      doctor?: string | null
    ): AccessRevokedEventFilter;

    "RecordAdded(uint256,address,address,string)"(
      recordId?: BigNumberish | null,
      patient?: string | null,
      uploader?: string | null,
      cid?: null
    ): RecordAddedEventFilter;
    RecordAdded(
      recordId?: BigNumberish | null,
      patient?: string | null,
      uploader?: string | null,
      cid?: null
    ): RecordAddedEventFilter;
  };

  estimateGas: {
    accessControlContract(overrides?: CallOverrides): Promise<BigNumber>;

    addRecord(
      patient: string,
      cid: string,
      fileType: string,
      description: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getPatientRecordIds(
      patient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecord(
      recordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantAccess(
      doctor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    patientDoctorAccess(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    records(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    revokeAccess(
      doctor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accessControlContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addRecord(
      patient: string,
      cid: string,
      fileType: string,
      description: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getPatientRecordIds(
      patient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecord(
      recordId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantAccess(
      doctor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    patientDoctorAccess(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    records(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeAccess(
      doctor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
